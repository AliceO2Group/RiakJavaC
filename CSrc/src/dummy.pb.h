// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dummy.proto

#ifndef PROTOBUF_dummy_2eproto__INCLUDED
#define PROTOBUF_dummy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace objects {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dummy_2eproto();
void protobuf_AssignDesc_dummy_2eproto();
void protobuf_ShutdownFile_dummy_2eproto();

class DummyObject;

// ===================================================================

class DummyObject : public ::google::protobuf::Message {
 public:
  DummyObject();
  virtual ~DummyObject();

  DummyObject(const DummyObject& from);

  inline DummyObject& operator=(const DummyObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DummyObject& default_instance();

  void Swap(DummyObject* other);

  // implements Message ----------------------------------------------

  DummyObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DummyObject& from);
  void MergeFrom(const DummyObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string firstString = 1;
  inline bool has_firststring() const;
  inline void clear_firststring();
  static const int kFirstStringFieldNumber = 1;
  inline const ::std::string& firststring() const;
  inline void set_firststring(const ::std::string& value);
  inline void set_firststring(const char* value);
  inline void set_firststring(const char* value, size_t size);
  inline ::std::string* mutable_firststring();
  inline ::std::string* release_firststring();
  inline void set_allocated_firststring(::std::string* firststring);

  // required string secondString = 2;
  inline bool has_secondstring() const;
  inline void clear_secondstring();
  static const int kSecondStringFieldNumber = 2;
  inline const ::std::string& secondstring() const;
  inline void set_secondstring(const ::std::string& value);
  inline void set_secondstring(const char* value);
  inline void set_secondstring(const char* value, size_t size);
  inline ::std::string* mutable_secondstring();
  inline ::std::string* release_secondstring();
  inline void set_allocated_secondstring(::std::string* secondstring);

  // optional int32 firstInt = 3;
  inline bool has_firstint() const;
  inline void clear_firstint();
  static const int kFirstIntFieldNumber = 3;
  inline ::google::protobuf::int32 firstint() const;
  inline void set_firstint(::google::protobuf::int32 value);

  // optional int32 secondInt = 4;
  inline bool has_secondint() const;
  inline void clear_secondint();
  static const int kSecondIntFieldNumber = 4;
  inline ::google::protobuf::int32 secondint() const;
  inline void set_secondint(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:objects.DummyObject)
 private:
  inline void set_has_firststring();
  inline void clear_has_firststring();
  inline void set_has_secondstring();
  inline void clear_has_secondstring();
  inline void set_has_firstint();
  inline void clear_has_firstint();
  inline void set_has_secondint();
  inline void clear_has_secondint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* firststring_;
  ::std::string* secondstring_;
  ::google::protobuf::int32 firstint_;
  ::google::protobuf::int32 secondint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dummy_2eproto();
  friend void protobuf_AssignDesc_dummy_2eproto();
  friend void protobuf_ShutdownFile_dummy_2eproto();

  void InitAsDefaultInstance();
  static DummyObject* default_instance_;
};
// ===================================================================


// ===================================================================

// DummyObject

// required string firstString = 1;
inline bool DummyObject::has_firststring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DummyObject::set_has_firststring() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DummyObject::clear_has_firststring() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DummyObject::clear_firststring() {
  if (firststring_ != &::google::protobuf::internal::kEmptyString) {
    firststring_->clear();
  }
  clear_has_firststring();
}
inline const ::std::string& DummyObject::firststring() const {
  return *firststring_;
}
inline void DummyObject::set_firststring(const ::std::string& value) {
  set_has_firststring();
  if (firststring_ == &::google::protobuf::internal::kEmptyString) {
    firststring_ = new ::std::string;
  }
  firststring_->assign(value);
}
inline void DummyObject::set_firststring(const char* value) {
  set_has_firststring();
  if (firststring_ == &::google::protobuf::internal::kEmptyString) {
    firststring_ = new ::std::string;
  }
  firststring_->assign(value);
}
inline void DummyObject::set_firststring(const char* value, size_t size) {
  set_has_firststring();
  if (firststring_ == &::google::protobuf::internal::kEmptyString) {
    firststring_ = new ::std::string;
  }
  firststring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DummyObject::mutable_firststring() {
  set_has_firststring();
  if (firststring_ == &::google::protobuf::internal::kEmptyString) {
    firststring_ = new ::std::string;
  }
  return firststring_;
}
inline ::std::string* DummyObject::release_firststring() {
  clear_has_firststring();
  if (firststring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = firststring_;
    firststring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DummyObject::set_allocated_firststring(::std::string* firststring) {
  if (firststring_ != &::google::protobuf::internal::kEmptyString) {
    delete firststring_;
  }
  if (firststring) {
    set_has_firststring();
    firststring_ = firststring;
  } else {
    clear_has_firststring();
    firststring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string secondString = 2;
inline bool DummyObject::has_secondstring() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DummyObject::set_has_secondstring() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DummyObject::clear_has_secondstring() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DummyObject::clear_secondstring() {
  if (secondstring_ != &::google::protobuf::internal::kEmptyString) {
    secondstring_->clear();
  }
  clear_has_secondstring();
}
inline const ::std::string& DummyObject::secondstring() const {
  return *secondstring_;
}
inline void DummyObject::set_secondstring(const ::std::string& value) {
  set_has_secondstring();
  if (secondstring_ == &::google::protobuf::internal::kEmptyString) {
    secondstring_ = new ::std::string;
  }
  secondstring_->assign(value);
}
inline void DummyObject::set_secondstring(const char* value) {
  set_has_secondstring();
  if (secondstring_ == &::google::protobuf::internal::kEmptyString) {
    secondstring_ = new ::std::string;
  }
  secondstring_->assign(value);
}
inline void DummyObject::set_secondstring(const char* value, size_t size) {
  set_has_secondstring();
  if (secondstring_ == &::google::protobuf::internal::kEmptyString) {
    secondstring_ = new ::std::string;
  }
  secondstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DummyObject::mutable_secondstring() {
  set_has_secondstring();
  if (secondstring_ == &::google::protobuf::internal::kEmptyString) {
    secondstring_ = new ::std::string;
  }
  return secondstring_;
}
inline ::std::string* DummyObject::release_secondstring() {
  clear_has_secondstring();
  if (secondstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secondstring_;
    secondstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DummyObject::set_allocated_secondstring(::std::string* secondstring) {
  if (secondstring_ != &::google::protobuf::internal::kEmptyString) {
    delete secondstring_;
  }
  if (secondstring) {
    set_has_secondstring();
    secondstring_ = secondstring;
  } else {
    clear_has_secondstring();
    secondstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 firstInt = 3;
inline bool DummyObject::has_firstint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DummyObject::set_has_firstint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DummyObject::clear_has_firstint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DummyObject::clear_firstint() {
  firstint_ = 0;
  clear_has_firstint();
}
inline ::google::protobuf::int32 DummyObject::firstint() const {
  return firstint_;
}
inline void DummyObject::set_firstint(::google::protobuf::int32 value) {
  set_has_firstint();
  firstint_ = value;
}

// optional int32 secondInt = 4;
inline bool DummyObject::has_secondint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DummyObject::set_has_secondint() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DummyObject::clear_has_secondint() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DummyObject::clear_secondint() {
  secondint_ = 0;
  clear_has_secondint();
}
inline ::google::protobuf::int32 DummyObject::secondint() const {
  return secondint_;
}
inline void DummyObject::set_secondint(::google::protobuf::int32 value) {
  set_has_secondint();
  secondint_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace objects

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dummy_2eproto__INCLUDED
